<?php

namespace $NAMESPACE_API_CONTROLLER$;

use $NAMESPACE_MODEL$;
use $NAMESPACE_REPOSITORY$;
use Illuminate\Http\Request;
use $NAMESPACE_APP$\Http\Controllers\AppBaseController;
use $NAMESPACE_API_REQUEST$\Create$MODEL_NAME$APIRequest;
use $NAMESPACE_API_REQUEST$\Update$MODEL_NAME$APIRequest;
use Jeffersonmartin\Buildhat\Criteria\LimitOffsetCriteria;
use Prettus\Repository\Criteria\RequestCriteria;
use Response;

class $MODEL_NAME$APIController extends AppBaseController
{

    protected function $MODEL_NAME_CAMEL$Repository()
    {
        return app(Repositories\$MODEL_NAME$Repository::class);
    }

    $DOC_INDEX$
    public function index(Request $request)
    {
        $this->$MODEL_NAME_CAMEL$Repository()->pushCriteria(new RequestCriteria($request));
        $this->$MODEL_NAME_CAMEL$Repository()->pushCriteria(new LimitOffsetCriteria($request));
        $$MODEL_NAME_PLURAL_SNAKE$ = $this->$MODEL_NAME_CAMEL$Repository()->all();

        return $this->sendResponse($$MODEL_NAME_PLURAL_SNAKE$->toArray(), '$MODEL_NAME_PLURAL_HUMAN$ retrieved successfully');
    }

    $DOC_STORE$
    public function store(Create$MODEL_NAME$APIRequest $request)
    {
        $input = $request->all();

        $$MODEL_NAME_PLURAL_SNAKE$ = $this->$MODEL_NAME_CAMEL$Repository()->create($input);

        return $this->sendResponse($$MODEL_NAME_PLURAL_SNAKE$->toArray(), '$MODEL_NAME_HUMAN$ saved successfully');
    }

    $DOC_SHOW$
    public function show($uuid)
    {
        /** @var $MODEL_NAME$ $$MODEL_NAME_CAMEL$ */
        $$MODEL_NAME_SNAKE$ = $this->$MODEL_NAME_CAMEL$Repository()->findWithoutFail($uuid);

        if (empty($$MODEL_NAME_SNAKE$)) {
            return $this->sendError('$MODEL_NAME_HUMAN$ not found');
        }

        return $this->sendResponse($$MODEL_NAME_SNAKE$->toArray(), '$MODEL_NAME_HUMAN$ retrieved successfully');
    }

    $DOC_UPDATE$
    public function update($uuid, Update$MODEL_NAME$APIRequest $request)
    {
        $input = $request->all();

        /** @var $MODEL_NAME$ $$MODEL_NAME_CAMEL$ */
        $$MODEL_NAME_SNAKE$ = $this->$MODEL_NAME_CAMEL$Repository()->findWithoutFail($uuid);

        if (empty($$MODEL_NAME_SNAKE$)) {
            return $this->sendError('$MODEL_NAME_HUMAN$ not found');
        }

        $$MODEL_NAME_SNAKE$ = $this->$MODEL_NAME_CAMEL$Repository()->update($input, $uuid);

        return $this->sendResponse($$MODEL_NAME_SNAKE$->toArray(), '$MODEL_NAME$ updated successfully');
    }

    $DOC_DESTROY$
    public function destroy($uuid)
    {
        /** @var $MODEL_NAME$ $$MODEL_NAME_CAMEL$ */
        $$MODEL_NAME_SNAKE$ = $this->$MODEL_NAME_CAMEL$Repository()->findWithoutFail($uuid);

        if (empty($$MODEL_NAME_SNAKE$)) {
            return $this->sendError('$MODEL_NAME_HUMAN$ not found');
        }

        $$MODEL_NAME_SNAKE$->delete();

        return $this->sendResponse($uuid, '$MODEL_NAME_HUMAN$ deleted successfully');
    }
}
