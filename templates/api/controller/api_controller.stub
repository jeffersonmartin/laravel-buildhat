<?php

namespace $NAMESPACE_API_CONTROLLER$;

use $NAMESPACE_MODEL$;
use $NAMESPACE_REPOSITORY$;
use $NAMESPACE_RESOURCE$;
use Illuminate\Http\Request;
use $NAMESPACE_APP$\Http\Controllers\AppBaseController;

class $MODEL_NAME$APIController extends AppBaseController
{

    protected function $MODEL_NAME_CAMEL$Repository()
    {
        return app(Repositories\$MODEL_NAME$Repository::class);
    }

    $DOC_INDEX$
    public function index(Request $request)
    {
        // Get $MODEL_NAME_PLURAL_HUMAN$
        $$MODEL_NAME_PLURAL_SNAKE$ = Models\$MODEL_NAME$::withCount(
            $this->$MODEL_NAME_CAMEL$Repository()->counters
            )->get();

        // Return JSON Resource Response
        return $this->sendResponse(Resources\$MODEL_NAME$Resource::collection($$MODEL_NAME_PLURAL_SNAKE$), 'success', 200);
    }

    $DOC_SHOW$
    public function show($uuid)
    {
        // Get $MODEL_NAME_HUMAN$ by UUID
        $$MODEL_NAME_SNAKE$ = Models\$MODEL_NAME$::with(
            $this->$MODEL_NAME_CAMEL$Repository()->relationships
            )->withCount($this->$MODEL_NAME_CAMEL$Repository()->counters)
            ->where('uuid', $uuid)
            ->first();

        if(empty($$MODEL_NAME_SNAKE$)) {
            return $this->sendError('record not found', 404);
        }

        return $this->sendResponse(new Resources\$MODEL_NAME$Resource($$MODEL_NAME_SNAKE$), 'success', 200);
    }

    $DOC_STORE$
    public function store(Create$MODEL_NAME$APIRequest $request)
    {
        // Use Laravel helper to convert request object to array
        $payload = $request->all();

        // Use repository method to store data
        $$MODEL_NAME_SNAKE$ = $this->$MODEL_NAME_CAMEL$Repository()->store($payload);

        // Return JSON Resource Response
        return $this->sendResponse(new Resources\$MODEL_NAME$Resource($$MODEL_NAME_SNAKE$), 'success', 201);
    }

    $DOC_UPDATE$
    public function update($uuid, Update$MODEL_NAME$APIRequest $request)
    {
        // Use Laravel helper to convert request object to array
        $payload = $request->all();

        // Get $MODEL_NAME_HUMAN$ by UUID
        $$MODEL_NAME_SNAKE$ = Models\$MODEL_NAME$::where('uuid', $uuid)->first();

        if(empty($$MODEL_NAME_SNAKE$)) {
            return $this->sendError('record not found', 404);
        }

        // Use repository method to update data
        $$MODEL_NAME_SNAKE$ = $this->$MODEL_NAME_CAMEL$Repository()->update($uuid, $input);

        return $this->sendResponse(new Resources\$MODEL_NAME$Resource($$MODEL_NAME_SNAKE$), 'success', 200);
    }

    $DOC_DESTROY$
    public function destroy($uuid)
    {
        // Get $MODEL_NAME_HUMAN$ by UUID
        $$MODEL_NAME_SNAKE$ = Models\$MODEL_NAME$::where('uuid', $uuid)->first();

        if(empty($$MODEL_NAME_SNAKE$)) {
            return $this->sendError('record not found', 404);
        }

        // Use repository method to destroy data
        $$MODEL_NAME_SNAKE$ = $this->$MODEL_NAME_CAMEL$Repository()->destroy($uuid);

        return $this->sendResponse(null, 'success', 200);
    }
}
