<?php

namespace $NAMESPACE_CONTROLLER$;

use $NAMESPACE_REQUEST$\Create$MODEL_NAME$Request;
use $NAMESPACE_REQUEST$\Update$MODEL_NAME$Request;
use $NAMESPACE_REPOSITORY$;
use $NAMESPACE_APP$\Http\Controllers\AppBaseController;
use Illuminate\Http\Request;
use Flash;
use Prettus\Repository\Criteria\RequestCriteria;
use Response;

class $MODEL_NAME$Controller extends AppBaseController
{

    protected function $MODEL_NAME_CAMEL$Repository()
    {
        return app(Repositories\$MODEL_NAME_PLURAL$::class);
    }

    /**
     * Display a listing of the $MODEL_NAME_PLURAL_HUMAN$.
     *
     * @param Request $request
     * @return Response
     */
    public function index(Request $request)
    {
        $this->$MODEL_NAME_CAMEL$Repository->pushCriteria(new RequestCriteria($request));
        $$MODEL_NAME_PLURAL_SNAKE$ = $this->$MODEL_NAME_CAMEL$Repository->$RENDER_TYPE$;

        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_DOT$.index')
            ->with('$MODEL_NAME_PLURAL_SNAKE$', $$MODEL_NAME_PLURAL_SNAKE$);
    }

    /**
     * Show the form for creating a new $MODEL_NAME_HUMAN$.
     *
     * @return Response
     */
    public function create()
    {
        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_DOT$.create');
    }

    /**
     * Store a newly created $MODEL_NAME_HUMAN$ in storage.
     *
     * @param Create$MODEL_NAME$Request $request
     *
     * @return Response
     */
    public function store(Create$MODEL_NAME$Request $request)
    {
        $input = $request->all();

        $$MODEL_NAME_SNAKE$ = $this->$MODEL_NAME_CAMEL$Repository->create($input);

        Flash::success('$MODEL_NAME_HUMAN$ saved successfully.');

        return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_DOT$.index'));
    }

    /**
     * Display the specified $MODEL_NAME_HUMAN$.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function show($id)
    {
        $$MODEL_NAME_SNAKE$ = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);

        if (empty($$MODEL_NAME_SNAKE$)) {
            Flash::error('$MODEL_NAME_HUMAN$ not found');

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_DOT$.index'));
        }

        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_DOT$.show')->with('$MODEL_NAME_SNAKE$', $$MODEL_NAME_SNAKE$);
    }

    /**
     * Show the form for editing the specified $MODEL_NAME_HUMAN$.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function edit($id)
    {
        $$MODEL_NAME_SNAKE$ = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);

        if (empty($$MODEL_NAME_CAMEL$)) {
            Flash::error('$MODEL_NAME_HUMAN$ not found');

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_DOT$.index'));
        }

        return view('$VIEW_PREFIX$$MODEL_NAME_PLURAL_DOT$.edit')->with('$MODEL_NAME_SNAKE$', $$MODEL_NAME_SNAKE$);
    }

    /**
     * Update the specified $MODEL_NAME_HUMAN$ in storage.
     *
     * @param  int              $id
     * @param Update$MODEL_NAME$Request $request
     *
     * @return Response
     */
    public function update($id, Update$MODEL_NAME$Request $request)
    {
        $$MODEL_NAME_SNAKE$ = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($id);

        if (empty($$MODEL_NAME_SNAKE$)) {
            Flash::error('$MODEL_NAME_HUMAN$ not found');

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_DOT$.index'));
        }

        $$MODEL_NAME_SNAKE$ = $this->$MODEL_NAME_CAMEL$Repository->update($request->all(), $id);

        Flash::success('$MODEL_NAME_HUMAN$ updated successfully.');

        return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_DOT$.index'));
    }

    /**
     * Remove the specified $MODEL_NAME_HUMAN$ from storage.
     *
     * @param  int $id
     *
     * @return Response
     */
    public function destroy($uuid)
    {
        $$MODEL_NAME_SNAKE$ = $this->$MODEL_NAME_CAMEL$Repository->findWithoutFail($uuid);

        if (empty($$MODEL_NAME_SNAKE$)) {
            Flash::error('$MODEL_NAME_HUMAN$ not found');

            return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_DOT$.index'));
        }

        $this->$MODEL_NAME_CAMEL$Repository->delete($uuid);

        Flash::success('$MODEL_NAME_HUMAN$ deleted successfully.');

        return redirect(route('$ROUTE_NAMED_PREFIX$$MODEL_NAME_PLURAL_DOT$.index'));
    }
}
